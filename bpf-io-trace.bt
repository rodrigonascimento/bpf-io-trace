#!/usr/bin/env bpftrace 

/*
 * Desc: bpftrace script to capture info about IO syscalls
 * Author: Rodrigo Nascimento
 */

BEGIN
{
    @ptrace = str($1);
    printf("start_at=%s\n", strftime("%s.%f", nsecs));
}

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat,
tracepoint:syscalls:sys_enter_openat2
/comm == @ptrace/
{
    @filename[tid] = args->filename;
}

tracepoint:syscalls:sys_enter_creat
/comm == @ptrace/
{
    @filename[tid] = args->pathname;
}

tracepoint:syscalls:sys_exit_open*,
tracepoint:syscalls:sys_exit_creat
/ @filename[tid] /
{
    $ret = args->ret;
    $fd = $ret >= 0 ? $ret : -1;
    if ( $fd >= 0 ) {
        @fdfile[tid,$fd] = @filename[tid];
        @fdfilename[tid,$fd] = str(@filename[tid]);
        printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld\n", strftime("%s.%f", nsecs), args->__syscall_nr, 
        probe, comm, pid, tid, str(@fdfile[tid,$fd]), $fd);
    }
}

tracepoint:syscalls:sys_enter_read
/ @fdfile[tid,args->fd] /
{
    @op_read_fd[tid] = args->fd;
    @op_read_req_size_b[tid] = args->count;
    @op_read_lat[tid] = nsecs
}

tracepoint:syscalls:sys_exit_read
/ @fdfile[tid,@op_read_fd[tid]] /
{
    $ret = args->ret;
    $bytes_read = $ret >=0 ? $ret : -1;

    printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld lat=%lld req_size_bytes=%ld bytes_read=%ld\n",
        strftime("%s.%f", nsecs), args->__syscall_nr, probe, comm, pid, tid, @fdfilename[tid,@op_read_fd[tid]], @op_read_fd[tid], 
        (nsecs - @op_read_lat[tid]), @op_read_req_size_b[tid], $bytes_read);

    delete(@op_read_fd[tid]);
    delete(@op_read_req_size_b[tid]);
    delete(@op_read_lat[tid]);
}

tracepoint:syscalls:sys_enter_pread64
/ @fdfile[tid,args->fd] /
{
    @op_pread64_fd[tid] = args->fd;
    @op_pread64_req_size_b[tid] = args->count;
    @op_pread64_offset[tid] = args->pos;
    @op_pread64_lat[tid] = nsecs;
}

tracepoint:syscalls:sys_exit_pread64
/ @fdfile[tid,@op_pread64_fd[tid]] /
{
    $ret = args->ret;
    $bytes_read = $ret >=0 ? $ret : -1;

    printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld lat=%lld req_size_bytes=%ld offset=%ld bytes_read=%ld\n",
        strftime("%s.%f", nsecs), args->__syscall_nr, probe, comm, pid, tid, @fdfilename[tid,@op_pread64_fd[tid]], @op_pread64_fd[tid], 
        (nsecs - @op_pread64_lat[tid]), @op_pread64_req_size_b[tid], @op_pread64_offset[tid], $bytes_read);

    delete(@op_pread64_fd[tid]);
    delete(@op_pread64_req_size_b[tid]);
    delete(@op_pread64_offset[tid]);
    delete(@op_pread64_lat[tid]);
}

tracepoint:syscalls:sys_enter_write
/ @fdfile[tid,args->fd] /
{
    @op_write_fd[tid] = args->fd;
    @op_write_req_size_b[tid] = args->count;
    @op_write_lat[tid] = nsecs;
}

tracepoint:syscalls:sys_exit_write
/ @fdfile[tid,@op_write_fd[tid]] /
{
    $ret = args->ret;
    $bytes_written = $ret >=0 ? $ret : -1;

    printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld lat=%lld req_size_bytes=%ld bytes_written=%ld\n",
        strftime("%s.%f", nsecs), args->__syscall_nr, probe, comm, pid, tid, @fdfilename[tid,@op_write_fd[tid]], @op_write_fd[tid], 
        (nsecs - @op_write_lat[tid]), @op_write_req_size_b[tid], $bytes_written);

    delete(@op_write_fd[tid]);
    delete(@op_write_req_size_b[tid]);
    delete(@op_write_lat[tid]);
}

tracepoint:syscalls:sys_enter_pwrite64
/ @fdfile[tid,args->fd] /
{
    @op_pwrite64_fd[tid] = args->fd;
    @op_pwrite64_req_size_b[tid] = args->count;
    @op_pwrite64_offset[tid] = args->pos;
    @op_pwrite64_lat[tid] = nsecs;
}

tracepoint:syscalls:sys_exit_pwrite64
/ @fdfile[tid,@op_pwrite64_fd[tid]] /
{
    $ret = args->ret;
    $bytes_written = $ret >=0 ? $ret : -1;

    printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld lat=%lld req_size_bytes=%ld offset=%ld bytes_written=%ld\n",
        strftime("%s.%f", nsecs), args->__syscall_nr, probe, comm, pid, tid, @fdfilename[tid,@op_pwrite64_fd[tid]], @op_pwrite64_fd[tid], 
        (nsecs - @op_pwrite64_lat[tid]), @op_pwrite64_req_size_b[tid], @op_pwrite64_offset[tid], $bytes_written);

    delete(@op_pwrite64_fd[tid]);
    delete(@op_pwrite64_req_size_b[tid]);
    delete(@op_pwrite64_offset[tid]);
    delete(@op_pwrite64_lat[tid]);
}

tracepoint:syscalls:sys_enter_writev
/ @fdfile[tid,args->fd] /
{
    @op_writev_fd[tid] = args->fd;
    @op_writev_lat[tid] = nsecs;
    printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld ", strftime("%s.%f", nsecs), args->__syscall_nr, probe, comm, 
    pid, tid, @fdfilename[tid,args->fd], args->fd);
}

tracepoint:syscalls:sys_exit_writev
/ @fdfile[tid,@op_writev_fd[tid]] /
{
    $ret = args->ret;
    $bytes_written = $ret >=0 ? $ret : -1;
    printf("lat=%lld bytes_written=%ld\n", (nsecs - @op_writev_lat[tid]), $bytes_written);
    delete(@op_writev_fd[tid]);
    delete(@op_writev_lat[tid]);
}

tracepoint:syscalls:sys_enter_lseek
/ @fdfile[tid,args->fd] /
{
    @op_lseek_fd[tid] = args->fd;
    @op_lseek_offset[tid] = args->offset;
    @op_lseek_whence[tid] = args->whence;
}

tracepoint:syscalls:sys_exit_lseek
/ @fdfile[tid,@op_lseek_fd[tid]] /
{
    $ret = args->ret;
    $offset = $ret >0 ? $ret : -1;

    if ( $offset > 0) {
        printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld offset=%ld whence=%ld\n",
        strftime("%s.%f", nsecs), args->__syscall_nr, probe, comm, pid, tid, @fdfilename[tid,@op_lseek_fd[tid]], @op_lseek_fd[tid], 
        $offset, @op_lseek_whence[tid]);
    }

    delete(@op_lseek_fd[tid]);
    delete(@op_lseek_offset[tid]);
    delete(@op_lseek_whence[tid]);
}

tracepoint:syscalls:sys_enter_fdatasync
/ @fdfile[tid,args->fd] /
{
    @op_fdatasync_fd[tid] = args->fd;
    @op_fdatasync_lat[tid] = nsecs;
}

tracepoint:syscalls:sys_exit_fdatasync
/ @fdfile[tid,args->fd] /
{
    $ret = args->ret;

    printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld lat=%lld\n",
        strftime("%s.%f", nsecs), args->__syscall_nr, probe, comm, pid, tid, @fdfilename[tid,@op_fdatasync_fd[tid]], @op_fdatasync_fd[tid], 
        (nsecs - @op_fdatasync_lat[tid]));

    delete(@op_fdatasync_fd[tid]);
    delete(@op_fdatasync_lat[tid]);
}

tracepoint:syscalls:sys_enter_close
/ @fdfile[tid,args->fd] /
{
    printf("time=%s syscall=%d probe=%s process=%s pid=%d tid=%d filename=%s fd=%ld\n", strftime("%s.%f", nsecs), args->__syscall_nr, 
    probe, comm, pid, tid, @fdfilename[tid,args->fd], args->fd);
    delete(@fdfile[tid,args->fd]);
    delete(@fdfilename[tid,args->fd]);
    delete(@filename[tid]);
}

END
{
    printf("finished_at=%s\n", strftime("%s.%f", nsecs));
    clear(@ptrace);
    clear(@filename);
    clear(@fdfile);
    clear(@fdfilename);
    clear(@op_read_fd);
    clear(@op_read_req_size_b);
    clear(@op_pread64_fd);
    clear(@op_pread64_req_size_b);
    clear(@op_pread64_offset);
    clear(@op_write_fd);
    clear(@op_write_req_size_b);
    clear(@op_pwrite64_fd);
    clear(@op_pwrite64_req_size_b);
    clear(@op_pwrite64_offset);
    clear(@op_writev_fd);
    clear(@op_lseek_fd);
    clear(@op_lseek_offset);
    clear(@op_lseek_whence);
    clear(@op_read_lat);
    clear(@op_pread64_lat);
    clear(@op_write_lat);
    clear(@op_pwrite64_lat);
    clear(@op_writev_lat);
}
